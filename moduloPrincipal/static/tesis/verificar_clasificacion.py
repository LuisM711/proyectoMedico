#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de verificaci√≥n del algoritmo de clasificaci√≥n cient√≠fico.
Verifica que los datos del usuario se clasifiquen correctamente.
"""

import sys
import numpy as np
import pandas as pd
from pathlib import Path

# Agregar el directorio del script de entrenamiento al path
sys.path.append(str(Path(__file__).parent))

# Importar las funciones del script de entrenamiento
from entrenar import build_label

def test_user_data():
    """
    Verifica la clasificaci√≥n con los datos reales del usuario.
    Estos datos deber√≠an resultar en riesgo "alto".
    """
    print("üî¨ VERIFICACI√ìN DEL ALGORITMO CIENT√çFICO")
    print("="*50)
    
    # Datos del usuario (deber√≠an ser riesgo ALTO)
    user_data = {
        "SEQN": [1],
        "RIDAGEYR": [35],  # Edad estimada
        "RIAGENDR": [2],   # Mujer
        "BMI": [37.0],     # Obesidad severa (‚â•35)
        "SBP": [170.0],    # Hipertensi√≥n severa (‚â•140)  
        "DBP": [105.0],    # Hipertensi√≥n severa (‚â•90)
        "DR1TKCAL": [2400.0],
        "pct_protein": [27.5],
        "pct_carb": [75.0],   # Desequilibrio (>65%)
        "pct_fat": [0.0],     # Desequilibrio (<20%)
        "DR1TSUGR": [87.5],   # Az√∫car alto
        "DR1TFIBE": [27.5],   # Fibra adecuada para mujer
        "DR1TSODI": [3500.0], # Sodio muy alto (>2300mg)
        "is_smoker": [1.0],   # Fumador
        "alcohol_days": [4.5],
        "phys_act_days": [4.5]
    }
    
    # Crear DataFrame
    df = pd.DataFrame(user_data)
    
    # Mapeo de columnas (simulando lo que hace engineer_features)
    colmap = {
        "age": "RIDAGEYR",
        "sex": "RIAGENDR", 
        "glucose": None,  # No disponible
        "hdl": None,      # No disponible
        "ldl": None,      # No disponible
        "tg": None,       # No disponible
        "kcal": "DR1TKCAL",
        "sugar_g": "DR1TSUGR",
        "fiber_g": "DR1TFIBE", 
        "sodium_mg": "DR1TSODI"
    }
    
    print("üìä DATOS DE ENTRADA:")
    print(f"   BMI: {user_data['BMI'][0]} (Obesidad severa - Umbral: ‚â•35)")
    print(f"   SBP: {user_data['SBP'][0]} mmHg (Hipertensi√≥n severa - Umbral: ‚â•140)")
    print(f"   DBP: {user_data['DBP'][0]} mmHg (Hipertensi√≥n severa - Umbral: ‚â•90)")
    print(f"   Fumador: {'S√≠' if user_data['is_smoker'][0] else 'No'}")
    print(f"   Sodio: {user_data['DR1TSODI'][0]} mg (Muy alto - Umbral: >2300)")
    print(f"   Carbohidratos: {user_data['pct_carb'][0]}% (Desequilibrio - Rango: 45-65%)")
    print(f"   Grasas: {user_data['pct_fat'][0]}% (Desequilibrio - Rango: 20-35%)")
    
    print("\nüßÆ APLICANDO ALGORITMO CIENT√çFICO...")
    
    try:
        # Aplicar el algoritmo de etiquetado cient√≠fico
        labels_df, metadata = build_label(df, colmap)
        
        result = labels_df.iloc[0]
        risk_label = result["risk_label"]
        risk_score = result["risk_score"]
        
        print(f"\nüìà RESULTADOS:")
        print(f"   Risk Score: {risk_score:.1f}/100")
        print(f"   Clasificaci√≥n: {risk_label.upper()}")
        
        # An√°lisis detallado
        print(f"\nüìã AN√ÅLISIS POR FACTOR:")
        
        # Factor antropom√©trico (20%)
        bmi_points = 0
        if user_data['BMI'][0] >= 40:
            bmi_points = 20.0
        elif user_data['BMI'][0] >= 35:
            bmi_points = 16.0
        elif user_data['BMI'][0] >= 30:
            bmi_points = 12.0
        elif user_data['BMI'][0] >= 25:
            bmi_points = 6.0
        print(f"   üèÉ Antropom√©trico: {bmi_points}/20 pts (BMI {user_data['BMI'][0]})")
        
        # Factor hemodin√°mico (25%)
        bp_points = 0
        if user_data['SBP'][0] >= 180 or user_data['DBP'][0] >= 120:
            bp_points = 25.0
        elif user_data['SBP'][0] >= 140 or user_data['DBP'][0] >= 90:
            bp_points = 20.0
        elif user_data['SBP'][0] >= 130 or user_data['DBP'][0] >= 80:
            bp_points = 12.5
        elif user_data['SBP'][0] >= 120:
            bp_points = 5.0
        print(f"   ü©∫ Hemodin√°mico: {bp_points}/25 pts (PA {user_data['SBP'][0]}/{user_data['DBP'][0]})")
        
        # Factor conductual (10%)
        behavioral_points = 0
        if user_data['is_smoker'][0] == 1:
            behavioral_points += 5.0
        if user_data['phys_act_days'][0] < 2:
            behavioral_points += 4.0
        elif user_data['phys_act_days'][0] < 3:
            behavioral_points += 2.0
        print(f"   üö≠ Conductual: {behavioral_points}/10 pts (Fumador + Actividad)")
        
        estimated_total = bmi_points + bp_points + behavioral_points
        print(f"\n   üî¢ Estimado m√≠nimo: {estimated_total} pts (solo factores disponibles)")
        
        print(f"\nüéØ CLASIFICACI√ìN ESPERADA vs REAL:")
        expected = "ALTO" if risk_score > 55 else ("MODERADO" if risk_score > 25 else "BAJO")
        print(f"   Esperada: {expected} (score > 55)")
        print(f"   Obtenida: {risk_label.upper()}")
        
        if risk_label == "alto":
            print("   ‚úÖ CORRECTO: Clasificaci√≥n apropiada para este perfil de riesgo")
        else:
            print("   ‚ùå PROBLEMA: Deber√≠a clasificarse como riesgo ALTO")
            print("   üí° Posible causa: Modelo entrenado con algoritmo anterior")
            
        return risk_label, risk_score
        
    except Exception as e:
        print(f"‚ùå ERROR en la verificaci√≥n: {e}")
        return None, None

def recommend_action(risk_label, risk_score):
    """Recomienda la acci√≥n a tomar."""
    print(f"\nüéØ RECOMENDACI√ìN:")
    
    if risk_label != "alto":
        print("   üîÑ RE-ENTRENAR EL MODELO:")
        print("     python entrenar.py")
        print("   ")
        print("   El modelo actual fue entrenado con el algoritmo anterior.")
        print("   Necesita re-entrenamiento con el nuevo sistema cient√≠fico.")
    else:
        print("   ‚úÖ El algoritmo est√° funcionando correctamente.")
        print("   El modelo est√° actualizado con el sistema cient√≠fico.")

if __name__ == "__main__":
    risk_label, risk_score = test_user_data() 
    
    if risk_label is not None:
        recommend_action(risk_label, risk_score)
    
    print(f"\nüìö Para m√°s detalles consulta: ALGORITMO_ETIQUETADO.md")
